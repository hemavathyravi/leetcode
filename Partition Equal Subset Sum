class Solution {
    public boolean canPartition(int[] nums) {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(sum%2!=0)
        return false;
        int target=sum/2;
        boolean[][] dp = new boolean[n][target+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<=target;j++)
            {
                if(j==0)
                {
                    dp[i][j]=true;
                }
                else{
                    dp[i][j]=false;
                }
            }
        }
        for(int i=0;i<target;i++)
        {
            if(i==nums[0])
            {
                 dp[0][nums[0]]=true;
            }
        }
       
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<=target;j++)
            {
                boolean ntake=dp[i-1][j];
                boolean take=false;
                if(nums[i]<=j)
                take=dp[i-1][j-nums[i]];
                dp[i][j]=take||ntake;

            }
        }
        return dp[n-1][target];
        
        
    }
}
