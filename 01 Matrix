class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        int[][] vis = new int[m][n];
        int[][] dist=new int[m][n];
        Queue<Pair> q =new LinkedList<Pair>();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==0){
                    vis[i][j]=1;
                    q.add(new Pair(i,j,0));
                }
                else{
                    vis[i][j]=0;
                }
            }
        }
        int[] delrow={-1,0,+1,0};
        int[] delcol={0,+1,0,-1};

        while(!q.isEmpty()){
            int row=q.peek().first;
            int col=q.peek().second;
            int step =q.peek().third;
            q.remove();
            dist[row][col]=step;
            for(int i=0;i<4;i++){
                int nrow=row+delrow[i];
                int ncol= col+delcol[i];
                if(nrow>=0&&nrow<m&&ncol>=0&&ncol<n&&vis[nrow][ncol]==0){
                    vis[nrow][ncol]=1;
                    q.add(new Pair(nrow,ncol,step+1));
                }

            }

        }
        return dist;
        
    }
    
}
class Pair
    {
        int first,second,third;
        Pair(int first,int second,int third){
            this.first=first;
            this.second=second;
            this.third=third;
        }
    }
