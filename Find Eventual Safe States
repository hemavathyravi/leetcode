class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> ans = new ArrayList<>();

        Queue<Integer> q = new LinkedList<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            adj.add(new ArrayList<>());
        }
        int[] indeg = new int[adj.size()];
        for(int i=0;i<adj.size();i++){
            for(int it:graph[i]){
                adj.get(it).add(i);
            }
        }
        int cnt=0;

        for(int i=0;i<indeg.length;i++){
            for(int it:adj.get(i)){
                indeg[it]+=1;
            }
        }
        for(int i=0;i<indeg.length;i++){
            if(indeg[i]==0){
                q.add(i);
            }
        }
        int num =graph.length;
        List<Integer> arr = new ArrayList<>();
        int i= num-1;
        while(!q.isEmpty()){
            int v=q.remove();
            arr.add(v);
            cnt++;
            for(int adjnode:adj.get(v)){
                indeg[adjnode]-=1;
                if(indeg[adjnode]==0){
                    q.add(adjnode);
                }
            }
        }
        Collections.sort(arr);
        return arr;
        
    }
}
