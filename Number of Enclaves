class Solution {
    public int numEnclaves(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] vis = new int[n][m];

        
        for (int i = 0; i < m; i++) {
            if (grid[0][i] == 1 && vis[0][i] != 1) {
                dfs(grid, vis, 0, i);
            }
            if (grid[n-1][i] == 1 && vis[n-1][i] != 1) {
                dfs(grid, vis, n-1, i);
            }
        }

       
        for (int i = 0; i < n; i++) {
            if (grid[i][0] == 1 && vis[i][0] != 1) {
                dfs(grid, vis, i, 0);
            }
            if (grid[i][m-1] == 1 && vis[i][m-1] != 1) {
                dfs(grid, vis, i, m-1);
            }
        }
        int count=0;

        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] != 1 && grid[i][j] == 1) {
                    count++;
                }
            }
        }
        return count;
        
    }
    public void dfs(int[][] board, int[][] vis, int row, int col) {
        int[] delrow = {-1, 0, +1, 0};
        int[] delcol = {0, +1, 0, -1};
        vis[row][col] = 1;
        int n = board.length;
        int m = board[0].length;

        for (int i = 0; i < 4; i++) {
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];

            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && board[nrow][ncol] == 1 && vis[nrow][ncol] != 1) {
                dfs(board, vis, nrow, ncol);
            }
        }
    }
}
